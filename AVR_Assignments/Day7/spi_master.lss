
spi_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000498  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006fa  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ef       	ldi	r30, 0xF0	; 240
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2b d0       	rcall	.+86     	; 0xb0 <main>
  5a:	c8 c1       	rjmp	.+912    	; 0x3ec <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <SPI_MasterInit>:
// It is recommended to use this coding style to
// follow better the mixed C-assembly code in the
// Program Memory window
//
void SPI_MasterInit(void)
{
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
/* Set MOSI and SCK output, all others input */
DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<SS);
  66:	e7 e3       	ldi	r30, 0x37	; 55
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	8c e2       	ldi	r24, 0x2C	; 44
  6c:	80 83       	st	Z, r24
/* Enable SPI, Master*/
SPCR = (1<<SPE)|(1<<MSTR);
  6e:	ed e2       	ldi	r30, 0x2D	; 45
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	80 e5       	ldi	r24, 0x50	; 80
  74:	80 83       	st	Z, r24
}
  76:	cf 91       	pop	r28
  78:	df 91       	pop	r29
  7a:	08 95       	ret

0000007c <SPI_MasterTransmit>:
void SPI_MasterTransmit(char cData)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
/* Start transmission */
PORTB &=~(1<<SS);
  88:	a8 e3       	ldi	r26, 0x38	; 56
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e8 e3       	ldi	r30, 0x38	; 56
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	8c 93       	st	X, r24
SPDR = cData;
  96:	ef e2       	ldi	r30, 0x2F	; 47
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	80 83       	st	Z, r24
/* Wait for transmission complete */
while(!(SPSR & (1<<SPIF)))
  9e:	ee e2       	ldi	r30, 0x2E	; 46
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 23       	and	r24, r24
  a6:	dc f7       	brge	.-10     	; 0x9e <SPI_MasterTransmit+0x22>
;
}
  a8:	0f 90       	pop	r0
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

000000b0 <main>:
// ***********************************************************
// Main program
//
int main(void) {
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	60 97       	sbiw	r28, 0x10	; 16
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF ; //portD as output
  c4:	e1 e3       	ldi	r30, 0x31	; 49
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	80 83       	st	Z, r24
	dataport = 0;
  cc:	e2 e3       	ldi	r30, 0x32	; 50
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	10 82       	st	Z, r1
   int data = 0x55;
  d2:	85 e5       	ldi	r24, 0x55	; 85
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	98 8b       	std	Y+16, r25	; 0x10
  d8:	8f 87       	std	Y+15, r24	; 0x0f
   PORTB |= (1<<SS);
  da:	a8 e3       	ldi	r26, 0x38	; 56
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e8 e3       	ldi	r30, 0x38	; 56
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	8c 93       	st	X, r24
	SPI_MasterInit();
  e8:	ba df       	rcall	.-140    	; 0x5e <SPI_MasterInit>
	while(1) {             // Infinite loop; define here the
      SPI_MasterTransmit(data);
  ea:	8f 85       	ldd	r24, Y+15	; 0x0f
  ec:	c7 df       	rcall	.-114    	; 0x7c <SPI_MasterTransmit>
   	dataport = SPDR;
  ee:	a2 e3       	ldi	r26, 0x32	; 50
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	ef e2       	ldi	r30, 0x2F	; 47
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8c 93       	st	X, r24
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a8 e4       	ldi	r26, 0x48	; 72
 100:	b3 e4       	ldi	r27, 0x43	; 67
 102:	8b 87       	std	Y+11, r24	; 0x0b
 104:	9c 87       	std	Y+12, r25	; 0x0c
 106:	ad 87       	std	Y+13, r26	; 0x0d
 108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	4a e7       	ldi	r20, 0x7A	; 122
 110:	53 e4       	ldi	r21, 0x43	; 67
 112:	6b 85       	ldd	r22, Y+11	; 0x0b
 114:	7c 85       	ldd	r23, Y+12	; 0x0c
 116:	8d 85       	ldd	r24, Y+13	; 0x0d
 118:	9e 85       	ldd	r25, Y+14	; 0x0e
 11a:	dd d0       	rcall	.+442    	; 0x2d6 <__mulsf3>
 11c:	dc 01       	movw	r26, r24
 11e:	cb 01       	movw	r24, r22
 120:	8f 83       	std	Y+7, r24	; 0x07
 122:	98 87       	std	Y+8, r25	; 0x08
 124:	a9 87       	std	Y+9, r26	; 0x09
 126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	40 e8       	ldi	r20, 0x80	; 128
 12e:	5f e3       	ldi	r21, 0x3F	; 63
 130:	6f 81       	ldd	r22, Y+7	; 0x07
 132:	78 85       	ldd	r23, Y+8	; 0x08
 134:	89 85       	ldd	r24, Y+9	; 0x09
 136:	9a 85       	ldd	r25, Y+10	; 0x0a
 138:	4d d0       	rcall	.+154    	; 0x1d4 <__cmpsf2>
 13a:	88 23       	and	r24, r24
 13c:	2c f4       	brge	.+10     	; 0x148 <main+0x98>
		__ticks = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	9e 83       	std	Y+6, r25	; 0x06
 144:	8d 83       	std	Y+5, r24	; 0x05
 146:	3b c0       	rjmp	.+118    	; 0x1be <main+0x10e>
	else if (__tmp > 65535)
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	3f ef       	ldi	r19, 0xFF	; 255
 14c:	4f e7       	ldi	r20, 0x7F	; 127
 14e:	57 e4       	ldi	r21, 0x47	; 71
 150:	6f 81       	ldd	r22, Y+7	; 0x07
 152:	78 85       	ldd	r23, Y+8	; 0x08
 154:	89 85       	ldd	r24, Y+9	; 0x09
 156:	9a 85       	ldd	r25, Y+10	; 0x0a
 158:	ba d0       	rcall	.+372    	; 0x2ce <__gesf2>
 15a:	18 16       	cp	r1, r24
 15c:	3c f5       	brge	.+78     	; 0x1ac <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e2       	ldi	r20, 0x20	; 32
 164:	51 e4       	ldi	r21, 0x41	; 65
 166:	6b 85       	ldd	r22, Y+11	; 0x0b
 168:	7c 85       	ldd	r23, Y+12	; 0x0c
 16a:	8d 85       	ldd	r24, Y+13	; 0x0d
 16c:	9e 85       	ldd	r25, Y+14	; 0x0e
 16e:	b3 d0       	rcall	.+358    	; 0x2d6 <__mulsf3>
 170:	dc 01       	movw	r26, r24
 172:	cb 01       	movw	r24, r22
 174:	bc 01       	movw	r22, r24
 176:	cd 01       	movw	r24, r26
 178:	31 d0       	rcall	.+98     	; 0x1dc <__fixunssfsi>
 17a:	dc 01       	movw	r26, r24
 17c:	cb 01       	movw	r24, r22
 17e:	9e 83       	std	Y+6, r25	; 0x06
 180:	8d 83       	std	Y+5, r24	; 0x05
 182:	0f c0       	rjmp	.+30     	; 0x1a2 <main+0xf2>
 184:	89 e1       	ldi	r24, 0x19	; 25
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9c 83       	std	Y+4, r25	; 0x04
 18a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	9c 81       	ldd	r25, Y+4	; 0x04
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0xe0>
 194:	9c 83       	std	Y+4, r25	; 0x04
 196:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 198:	8d 81       	ldd	r24, Y+5	; 0x05
 19a:	9e 81       	ldd	r25, Y+6	; 0x06
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	9e 83       	std	Y+6, r25	; 0x06
 1a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a2:	8d 81       	ldd	r24, Y+5	; 0x05
 1a4:	9e 81       	ldd	r25, Y+6	; 0x06
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	69 f7       	brne	.-38     	; 0x184 <main+0xd4>
 1aa:	9f cf       	rjmp	.-194    	; 0xea <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ac:	6f 81       	ldd	r22, Y+7	; 0x07
 1ae:	78 85       	ldd	r23, Y+8	; 0x08
 1b0:	89 85       	ldd	r24, Y+9	; 0x09
 1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b4:	13 d0       	rcall	.+38     	; 0x1dc <__fixunssfsi>
 1b6:	dc 01       	movw	r26, r24
 1b8:	cb 01       	movw	r24, r22
 1ba:	9e 83       	std	Y+6, r25	; 0x06
 1bc:	8d 83       	std	Y+5, r24	; 0x05
 1be:	8d 81       	ldd	r24, Y+5	; 0x05
 1c0:	9e 81       	ldd	r25, Y+6	; 0x06
 1c2:	9a 83       	std	Y+2, r25	; 0x02
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x11a>
 1ce:	9a 83       	std	Y+2, r25	; 0x02
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	8b cf       	rjmp	.-234    	; 0xea <main+0x3a>

000001d4 <__cmpsf2>:
 1d4:	2f d0       	rcall	.+94     	; 0x234 <__fp_cmp>
 1d6:	08 f4       	brcc	.+2      	; 0x1da <__cmpsf2+0x6>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret

000001dc <__fixunssfsi>:
 1dc:	57 d0       	rcall	.+174    	; 0x28c <__fp_splitA>
 1de:	88 f0       	brcs	.+34     	; 0x202 <__fixunssfsi+0x26>
 1e0:	9f 57       	subi	r25, 0x7F	; 127
 1e2:	90 f0       	brcs	.+36     	; 0x208 <__fixunssfsi+0x2c>
 1e4:	b9 2f       	mov	r27, r25
 1e6:	99 27       	eor	r25, r25
 1e8:	b7 51       	subi	r27, 0x17	; 23
 1ea:	a0 f0       	brcs	.+40     	; 0x214 <__fixunssfsi+0x38>
 1ec:	d1 f0       	breq	.+52     	; 0x222 <__fixunssfsi+0x46>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	88 1f       	adc	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	1a f0       	brmi	.+6      	; 0x1fe <__fixunssfsi+0x22>
 1f8:	ba 95       	dec	r27
 1fa:	c9 f7       	brne	.-14     	; 0x1ee <__fixunssfsi+0x12>
 1fc:	12 c0       	rjmp	.+36     	; 0x222 <__fixunssfsi+0x46>
 1fe:	b1 30       	cpi	r27, 0x01	; 1
 200:	81 f0       	breq	.+32     	; 0x222 <__fixunssfsi+0x46>
 202:	5e d0       	rcall	.+188    	; 0x2c0 <__fp_zero>
 204:	b1 e0       	ldi	r27, 0x01	; 1
 206:	08 95       	ret
 208:	5b c0       	rjmp	.+182    	; 0x2c0 <__fp_zero>
 20a:	67 2f       	mov	r22, r23
 20c:	78 2f       	mov	r23, r24
 20e:	88 27       	eor	r24, r24
 210:	b8 5f       	subi	r27, 0xF8	; 248
 212:	39 f0       	breq	.+14     	; 0x222 <__fixunssfsi+0x46>
 214:	b9 3f       	cpi	r27, 0xF9	; 249
 216:	cc f3       	brlt	.-14     	; 0x20a <__fixunssfsi+0x2e>
 218:	86 95       	lsr	r24
 21a:	77 95       	ror	r23
 21c:	67 95       	ror	r22
 21e:	b3 95       	inc	r27
 220:	d9 f7       	brne	.-10     	; 0x218 <__fixunssfsi+0x3c>
 222:	3e f4       	brtc	.+14     	; 0x232 <__fixunssfsi+0x56>
 224:	90 95       	com	r25
 226:	80 95       	com	r24
 228:	70 95       	com	r23
 22a:	61 95       	neg	r22
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	8f 4f       	sbci	r24, 0xFF	; 255
 230:	9f 4f       	sbci	r25, 0xFF	; 255
 232:	08 95       	ret

00000234 <__fp_cmp>:
 234:	99 0f       	add	r25, r25
 236:	00 08       	sbc	r0, r0
 238:	55 0f       	add	r21, r21
 23a:	aa 0b       	sbc	r26, r26
 23c:	e0 e8       	ldi	r30, 0x80	; 128
 23e:	fe ef       	ldi	r31, 0xFE	; 254
 240:	16 16       	cp	r1, r22
 242:	17 06       	cpc	r1, r23
 244:	e8 07       	cpc	r30, r24
 246:	f9 07       	cpc	r31, r25
 248:	c0 f0       	brcs	.+48     	; 0x27a <__fp_cmp+0x46>
 24a:	12 16       	cp	r1, r18
 24c:	13 06       	cpc	r1, r19
 24e:	e4 07       	cpc	r30, r20
 250:	f5 07       	cpc	r31, r21
 252:	98 f0       	brcs	.+38     	; 0x27a <__fp_cmp+0x46>
 254:	62 1b       	sub	r22, r18
 256:	73 0b       	sbc	r23, r19
 258:	84 0b       	sbc	r24, r20
 25a:	95 0b       	sbc	r25, r21
 25c:	39 f4       	brne	.+14     	; 0x26c <__fp_cmp+0x38>
 25e:	0a 26       	eor	r0, r26
 260:	61 f0       	breq	.+24     	; 0x27a <__fp_cmp+0x46>
 262:	23 2b       	or	r18, r19
 264:	24 2b       	or	r18, r20
 266:	25 2b       	or	r18, r21
 268:	21 f4       	brne	.+8      	; 0x272 <__fp_cmp+0x3e>
 26a:	08 95       	ret
 26c:	0a 26       	eor	r0, r26
 26e:	09 f4       	brne	.+2      	; 0x272 <__fp_cmp+0x3e>
 270:	a1 40       	sbci	r26, 0x01	; 1
 272:	a6 95       	lsr	r26
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	81 1d       	adc	r24, r1
 278:	81 1d       	adc	r24, r1
 27a:	08 95       	ret

0000027c <__fp_split3>:
 27c:	57 fd       	sbrc	r21, 7
 27e:	90 58       	subi	r25, 0x80	; 128
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	59 f0       	breq	.+22     	; 0x29c <__fp_splitA+0x10>
 286:	5f 3f       	cpi	r21, 0xFF	; 255
 288:	71 f0       	breq	.+28     	; 0x2a6 <__fp_splitA+0x1a>
 28a:	47 95       	ror	r20

0000028c <__fp_splitA>:
 28c:	88 0f       	add	r24, r24
 28e:	97 fb       	bst	r25, 7
 290:	99 1f       	adc	r25, r25
 292:	61 f0       	breq	.+24     	; 0x2ac <__fp_splitA+0x20>
 294:	9f 3f       	cpi	r25, 0xFF	; 255
 296:	79 f0       	breq	.+30     	; 0x2b6 <__fp_splitA+0x2a>
 298:	87 95       	ror	r24
 29a:	08 95       	ret
 29c:	12 16       	cp	r1, r18
 29e:	13 06       	cpc	r1, r19
 2a0:	14 06       	cpc	r1, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	f2 cf       	rjmp	.-28     	; 0x28a <__fp_split3+0xe>
 2a6:	46 95       	lsr	r20
 2a8:	f1 df       	rcall	.-30     	; 0x28c <__fp_splitA>
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <__fp_splitA+0x30>
 2ac:	16 16       	cp	r1, r22
 2ae:	17 06       	cpc	r1, r23
 2b0:	18 06       	cpc	r1, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	f1 cf       	rjmp	.-30     	; 0x298 <__fp_splitA+0xc>
 2b6:	86 95       	lsr	r24
 2b8:	71 05       	cpc	r23, r1
 2ba:	61 05       	cpc	r22, r1
 2bc:	08 94       	sec
 2be:	08 95       	ret

000002c0 <__fp_zero>:
 2c0:	e8 94       	clt

000002c2 <__fp_szero>:
 2c2:	bb 27       	eor	r27, r27
 2c4:	66 27       	eor	r22, r22
 2c6:	77 27       	eor	r23, r23
 2c8:	cb 01       	movw	r24, r22
 2ca:	97 f9       	bld	r25, 7
 2cc:	08 95       	ret

000002ce <__gesf2>:
 2ce:	b2 df       	rcall	.-156    	; 0x234 <__fp_cmp>
 2d0:	08 f4       	brcc	.+2      	; 0x2d4 <__gesf2+0x6>
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	08 95       	ret

000002d6 <__mulsf3>:
 2d6:	0b d0       	rcall	.+22     	; 0x2ee <__mulsf3x>
 2d8:	78 c0       	rjmp	.+240    	; 0x3ca <__fp_round>
 2da:	69 d0       	rcall	.+210    	; 0x3ae <__fp_pscA>
 2dc:	28 f0       	brcs	.+10     	; 0x2e8 <__mulsf3+0x12>
 2de:	6e d0       	rcall	.+220    	; 0x3bc <__fp_pscB>
 2e0:	18 f0       	brcs	.+6      	; 0x2e8 <__mulsf3+0x12>
 2e2:	95 23       	and	r25, r21
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <__mulsf3+0x12>
 2e6:	5a c0       	rjmp	.+180    	; 0x39c <__fp_inf>
 2e8:	5f c0       	rjmp	.+190    	; 0x3a8 <__fp_nan>
 2ea:	11 24       	eor	r1, r1
 2ec:	ea cf       	rjmp	.-44     	; 0x2c2 <__fp_szero>

000002ee <__mulsf3x>:
 2ee:	c6 df       	rcall	.-116    	; 0x27c <__fp_split3>
 2f0:	a0 f3       	brcs	.-24     	; 0x2da <__mulsf3+0x4>

000002f2 <__mulsf3_pse>:
 2f2:	95 9f       	mul	r25, r21
 2f4:	d1 f3       	breq	.-12     	; 0x2ea <__mulsf3+0x14>
 2f6:	95 0f       	add	r25, r21
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	55 1f       	adc	r21, r21
 2fc:	62 9f       	mul	r22, r18
 2fe:	f0 01       	movw	r30, r0
 300:	72 9f       	mul	r23, r18
 302:	bb 27       	eor	r27, r27
 304:	f0 0d       	add	r31, r0
 306:	b1 1d       	adc	r27, r1
 308:	63 9f       	mul	r22, r19
 30a:	aa 27       	eor	r26, r26
 30c:	f0 0d       	add	r31, r0
 30e:	b1 1d       	adc	r27, r1
 310:	aa 1f       	adc	r26, r26
 312:	64 9f       	mul	r22, r20
 314:	66 27       	eor	r22, r22
 316:	b0 0d       	add	r27, r0
 318:	a1 1d       	adc	r26, r1
 31a:	66 1f       	adc	r22, r22
 31c:	82 9f       	mul	r24, r18
 31e:	22 27       	eor	r18, r18
 320:	b0 0d       	add	r27, r0
 322:	a1 1d       	adc	r26, r1
 324:	62 1f       	adc	r22, r18
 326:	73 9f       	mul	r23, r19
 328:	b0 0d       	add	r27, r0
 32a:	a1 1d       	adc	r26, r1
 32c:	62 1f       	adc	r22, r18
 32e:	83 9f       	mul	r24, r19
 330:	a0 0d       	add	r26, r0
 332:	61 1d       	adc	r22, r1
 334:	22 1f       	adc	r18, r18
 336:	74 9f       	mul	r23, r20
 338:	33 27       	eor	r19, r19
 33a:	a0 0d       	add	r26, r0
 33c:	61 1d       	adc	r22, r1
 33e:	23 1f       	adc	r18, r19
 340:	84 9f       	mul	r24, r20
 342:	60 0d       	add	r22, r0
 344:	21 1d       	adc	r18, r1
 346:	82 2f       	mov	r24, r18
 348:	76 2f       	mov	r23, r22
 34a:	6a 2f       	mov	r22, r26
 34c:	11 24       	eor	r1, r1
 34e:	9f 57       	subi	r25, 0x7F	; 127
 350:	50 40       	sbci	r21, 0x00	; 0
 352:	8a f0       	brmi	.+34     	; 0x376 <__mulsf3_pse+0x84>
 354:	e1 f0       	breq	.+56     	; 0x38e <__mulsf3_pse+0x9c>
 356:	88 23       	and	r24, r24
 358:	4a f0       	brmi	.+18     	; 0x36c <__mulsf3_pse+0x7a>
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	bb 1f       	adc	r27, r27
 360:	66 1f       	adc	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	88 1f       	adc	r24, r24
 366:	91 50       	subi	r25, 0x01	; 1
 368:	50 40       	sbci	r21, 0x00	; 0
 36a:	a9 f7       	brne	.-22     	; 0x356 <__mulsf3_pse+0x64>
 36c:	9e 3f       	cpi	r25, 0xFE	; 254
 36e:	51 05       	cpc	r21, r1
 370:	70 f0       	brcs	.+28     	; 0x38e <__mulsf3_pse+0x9c>
 372:	14 c0       	rjmp	.+40     	; 0x39c <__fp_inf>
 374:	a6 cf       	rjmp	.-180    	; 0x2c2 <__fp_szero>
 376:	5f 3f       	cpi	r21, 0xFF	; 255
 378:	ec f3       	brlt	.-6      	; 0x374 <__mulsf3_pse+0x82>
 37a:	98 3e       	cpi	r25, 0xE8	; 232
 37c:	dc f3       	brlt	.-10     	; 0x374 <__mulsf3_pse+0x82>
 37e:	86 95       	lsr	r24
 380:	77 95       	ror	r23
 382:	67 95       	ror	r22
 384:	b7 95       	ror	r27
 386:	f7 95       	ror	r31
 388:	e7 95       	ror	r30
 38a:	9f 5f       	subi	r25, 0xFF	; 255
 38c:	c1 f7       	brne	.-16     	; 0x37e <__mulsf3_pse+0x8c>
 38e:	fe 2b       	or	r31, r30
 390:	88 0f       	add	r24, r24
 392:	91 1d       	adc	r25, r1
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	97 f9       	bld	r25, 7
 39a:	08 95       	ret

0000039c <__fp_inf>:
 39c:	97 f9       	bld	r25, 7
 39e:	9f 67       	ori	r25, 0x7F	; 127
 3a0:	80 e8       	ldi	r24, 0x80	; 128
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	08 95       	ret

000003a8 <__fp_nan>:
 3a8:	9f ef       	ldi	r25, 0xFF	; 255
 3aa:	80 ec       	ldi	r24, 0xC0	; 192
 3ac:	08 95       	ret

000003ae <__fp_pscA>:
 3ae:	00 24       	eor	r0, r0
 3b0:	0a 94       	dec	r0
 3b2:	16 16       	cp	r1, r22
 3b4:	17 06       	cpc	r1, r23
 3b6:	18 06       	cpc	r1, r24
 3b8:	09 06       	cpc	r0, r25
 3ba:	08 95       	ret

000003bc <__fp_pscB>:
 3bc:	00 24       	eor	r0, r0
 3be:	0a 94       	dec	r0
 3c0:	12 16       	cp	r1, r18
 3c2:	13 06       	cpc	r1, r19
 3c4:	14 06       	cpc	r1, r20
 3c6:	05 06       	cpc	r0, r21
 3c8:	08 95       	ret

000003ca <__fp_round>:
 3ca:	09 2e       	mov	r0, r25
 3cc:	03 94       	inc	r0
 3ce:	00 0c       	add	r0, r0
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <__fp_round+0xc>
 3d2:	88 23       	and	r24, r24
 3d4:	52 f0       	brmi	.+20     	; 0x3ea <__fp_round+0x20>
 3d6:	bb 0f       	add	r27, r27
 3d8:	40 f4       	brcc	.+16     	; 0x3ea <__fp_round+0x20>
 3da:	bf 2b       	or	r27, r31
 3dc:	11 f4       	brne	.+4      	; 0x3e2 <__fp_round+0x18>
 3de:	60 ff       	sbrs	r22, 0
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <__fp_round+0x20>
 3e2:	6f 5f       	subi	r22, 0xFF	; 255
 3e4:	7f 4f       	sbci	r23, 0xFF	; 255
 3e6:	8f 4f       	sbci	r24, 0xFF	; 255
 3e8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ea:	08 95       	ret

000003ec <_exit>:
 3ec:	f8 94       	cli

000003ee <__stop_program>:
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <__stop_program>
