
delay_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  000000f8  0000016c  2**0
                  ALLOC
  2 .stab         000003d8  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000069f  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ef       	ldi	r30, 0xF8	; 248
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2d d0       	rcall	.+90     	; 0xb4 <main>
  5a:	4c c0       	rjmp	.+152    	; 0xf4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_1>:
//
int My_global;

// Interrupt handler example for INT0
//
SIGNAL(SIG_INTERRUPT0) {
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	df 93       	push	r29
  6a:	cf 93       	push	r28
  6c:	cd b7       	in	r28, 0x3d	; 61
  6e:	de b7       	in	r29, 0x3e	; 62

}
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

0000007e <delay_1ms>:
// follow better the mixed C-assembly code in the
// Program Memory window
//
void delay_1ms(void);
void delay_1ms(void)
{
  7e:	df 93       	push	r29
  80:	cf 93       	push	r28
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62

 TCNT1 = (255-125);
  86:	ec e4       	ldi	r30, 0x4C	; 76
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	82 e8       	ldi	r24, 0x82	; 130
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	91 83       	std	Z+1, r25	; 0x01
  90:	80 83       	st	Z, r24
 TCCR1B= (1<<CS10);
  92:	ee e4       	ldi	r30, 0x4E	; 78
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 83       	st	Z, r24

 while(TOV1 == 1);
 TIFR = (1<< TOV1);
  9a:	e8 e5       	ldi	r30, 0x58	; 88
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	84 e0       	ldi	r24, 0x04	; 4
  a0:	80 83       	st	Z, r24
 TCNT1 = (255 - 125);
  a2:	ec e4       	ldi	r30, 0x4C	; 76
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	82 e8       	ldi	r24, 0x82	; 130
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	91 83       	std	Z+1, r25	; 0x01
  ac:	80 83       	st	Z, r24

}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <main>:

// ***********************************************************
// Main program
//
int main(void) {
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	00 d0       	rcall	.+0      	; 0xba <main+0x6>
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62

DDRD = 255;
  be:	e1 e3       	ldi	r30, 0x31	; 49
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	80 83       	st	Z, r24

   while(1) {             // Infinite loop; define here the
       PORTD = 0xA0;
  c6:	e2 e3       	ldi	r30, 0x32	; 50
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 ea       	ldi	r24, 0xA0	; 160
  cc:	80 83       	st	Z, r24
      for(int i = 0 ; i <10; i ++)
  ce:	1a 82       	std	Y+2, r1	; 0x02
  d0:	19 82       	std	Y+1, r1	; 0x01
  d2:	06 c0       	rjmp	.+12     	; 0xe0 <main+0x2c>
		{	
			delay_1ms();
  d4:	d4 df       	rcall	.-88     	; 0x7e <delay_1ms>

DDRD = 255;

   while(1) {             // Infinite loop; define here the
       PORTD = 0xA0;
      for(int i = 0 ; i <10; i ++)
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	9a 81       	ldd	r25, Y+2	; 0x02
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	9a 83       	std	Y+2, r25	; 0x02
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	9a 81       	ldd	r25, Y+2	; 0x02
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	91 05       	cpc	r25, r1
  e8:	ac f3       	brlt	.-22     	; 0xd4 <main+0x20>
		{	
			delay_1ms();
		}
       PORTD = 0x50;    // system behaviour
  ea:	e2 e3       	ldi	r30, 0x32	; 50
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 e5       	ldi	r24, 0x50	; 80
  f0:	80 83       	st	Z, r24
  f2:	e9 cf       	rjmp	.-46     	; 0xc6 <main+0x12>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
