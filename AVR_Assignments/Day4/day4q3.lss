
day4q3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00000108  0000017c  2**0
                  ALLOC
  2 .stab         00000384  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000666  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	26 c0       	rjmp	.+76     	; 0x5e <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e0       	ldi	r30, 0x08	; 8
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1c d0       	rcall	.+56     	; 0x92 <main>
  5a:	54 c0       	rjmp	.+168    	; 0x104 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_8>:

// Define here the global static variables
//
int flag = 0;
ISR(TIMER1_OVF_vect )
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
 	flag = 1;
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	90 93 61 00 	sts	0x0061, r25
  7c:	80 93 60 00 	sts	0x0060, r24
}
  80:	cf 91       	pop	r28
  82:	df 91       	pop	r29
  84:	9f 91       	pop	r25
  86:	8f 91       	pop	r24
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <main>:


// ***********************************************************
// Main program
//
int main(void) {
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	0f 92       	push	r0
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
   DDRB = (1<<PB0);
  9e:	e7 e3       	ldi	r30, 0x37	; 55
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	80 83       	st	Z, r24

	 TIMSK |= (1<< TOIE1);
  a6:	a9 e5       	ldi	r26, 0x59	; 89
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e9 e5       	ldi	r30, 0x59	; 89
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	8c 93       	st	X, r24
   TCNT1= 0;
  b4:	ec e4       	ldi	r30, 0x4C	; 76
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	11 82       	std	Z+1, r1	; 0x01
  ba:	10 82       	st	Z, r1
   TCCR1B |= (1<<CS10)|(1<<CS12);
  bc:	ae e4       	ldi	r26, 0x4E	; 78
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	ee e4       	ldi	r30, 0x4E	; 78
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	85 60       	ori	r24, 0x05	; 5
  c8:	8c 93       	st	X, r24
   sei();
  ca:	78 94       	sei
   while(1) {             // Infinite loop; define here the
     if(flag ==1)
  cc:	80 91 60 00 	lds	r24, 0x0060
  d0:	90 91 61 00 	lds	r25, 0x0061
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	91 05       	cpc	r25, r1
  d8:	c9 f7       	brne	.-14     	; 0xcc <main+0x3a>
     {
     	flag = 0;
  da:	10 92 61 00 	sts	0x0061, r1
  de:	10 92 60 00 	sts	0x0060, r1
     	PORTB = !PORTB;
  e2:	88 e3       	ldi	r24, 0x38	; 56
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	9b 83       	std	Y+3, r25	; 0x03
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	e8 e3       	ldi	r30, 0x38	; 56
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	88 23       	and	r24, r24
  f4:	11 f4       	brne	.+4      	; 0xfa <main+0x68>
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	99 83       	std	Y+1, r25	; 0x01
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	ea 81       	ldd	r30, Y+2	; 0x02
  fe:	fb 81       	ldd	r31, Y+3	; 0x03
 100:	80 83       	st	Z, r24
 102:	e4 cf       	rjmp	.-56     	; 0xcc <main+0x3a>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
