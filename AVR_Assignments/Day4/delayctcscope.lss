
delayctcscope.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  0000012e  000001a2  2**0
                  ALLOC
  2 .stab         000003c0  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000068c  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	3b c0       	rjmp	.+118    	; 0x7e <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e2       	ldi	r30, 0x2E	; 46
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3b d0       	rcall	.+118    	; 0xd0 <main>
  5a:	67 c0       	rjmp	.+206    	; 0x12a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_1>:
//
int My_global;
int flag = 0;
// Interrupt handler example for INT0
//
SIGNAL(SIG_INTERRUPT0) {
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	df 93       	push	r29
  6a:	cf 93       	push	r28
  6c:	cd b7       	in	r28, 0x3d	; 61
  6e:	de b7       	in	r29, 0x3e	; 62

}
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

0000007e <__vector_3>:

// It is recommended to use this coding style to
ISR(TIMER2_COMP_vect)
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	df 93       	push	r29
  8e:	cf 93       	push	r28
  90:	00 d0       	rcall	.+0      	; 0x92 <__vector_3+0x14>
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
    flag = !flag;
  96:	80 91 60 00 	lds	r24, 0x0060
  9a:	90 91 61 00 	lds	r25, 0x0061
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	19 82       	std	Y+1, r1	; 0x01
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	21 f4       	brne	.+8      	; 0xae <__vector_3+0x30>
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	9a 83       	std	Y+2, r25	; 0x02
  ac:	89 83       	std	Y+1, r24	; 0x01
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	9a 81       	ldd	r25, Y+2	; 0x02
  b2:	90 93 61 00 	sts	0x0061, r25
  b6:	80 93 60 00 	sts	0x0060, r24
}
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <main>:

int main(void) {
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
 DDRD = 0xF0;   //PortD higher nibble as output
  d8:	e1 e3       	ldi	r30, 0x31	; 49
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	80 83       	st	Z, r24
 TCNT2 = 0;
  e0:	e4 e4       	ldi	r30, 0x44	; 68
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	10 82       	st	Z, r1
 OCR2 = 61;   //compare value for 1sec
  e6:	e3 e4       	ldi	r30, 0x43	; 67
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	8d e3       	ldi	r24, 0x3D	; 61
  ec:	80 83       	st	Z, r24
 TIMSK  = TIMSK |  (1<<OCIE2);//enable Timer2 OC interrupt
  ee:	a9 e5       	ldi	r26, 0x59	; 89
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e9 e5       	ldi	r30, 0x59	; 89
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8c 93       	st	X, r24
 TCCR2  = TCCR2 | (1<< CS21)| (1 << WGM21);
  fc:	a5 e4       	ldi	r26, 0x45	; 69
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	e5 e4       	ldi	r30, 0x45	; 69
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8a 60       	ori	r24, 0x0A	; 10
 108:	8c 93       	st	X, r24

 sei();
 10a:	78 94       	sei

   while(1) {             // Infinite loop; define here the
      PORTD = 0x00;
 10c:	e2 e3       	ldi	r30, 0x32	; 50
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	10 82       	st	Z, r1
		if(flag ==1)
 112:	80 91 60 00 	lds	r24, 0x0060
 116:	90 91 61 00 	lds	r25, 0x0061
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	91 05       	cpc	r25, r1
 11e:	b1 f7       	brne	.-20     	; 0x10c <main+0x3c>

     {
      	PORTD = 0xFF;
 120:	e2 e3       	ldi	r30, 0x32	; 50
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	80 83       	st	Z, r24
 128:	f1 cf       	rjmp	.-30     	; 0x10c <main+0x3c>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
