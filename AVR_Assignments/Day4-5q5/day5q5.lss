
day5q5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003a8  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000065a  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	27 c0       	rjmp	.+78     	; 0x5e <__vector_7>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e2       	ldi	r30, 0x28	; 40
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	31 d0       	rcall	.+98     	; 0xbc <main>
  5a:	64 c0       	rjmp	.+200    	; 0x124 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_7>:
// Interrupt handler example for INT0
//


ISR(TIMER1_COMPB_vect )
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	8f 93       	push	r24
  6c:	9f 93       	push	r25
  6e:	ef 93       	push	r30
  70:	ff 93       	push	r31
  72:	df 93       	push	r29
  74:	cf 93       	push	r28
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
		if(OCR1B == 31250)
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	91 81       	ldd	r25, Z+1	; 0x01
  82:	2a e7       	ldi	r18, 0x7A	; 122
  84:	82 31       	cpi	r24, 0x12	; 18
  86:	92 07       	cpc	r25, r18
  88:	39 f4       	brne	.+14     	; 0x98 <__vector_7+0x3a>
		{
			OCR1B= 15625;
  8a:	e8 e4       	ldi	r30, 0x48	; 72
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	89 e0       	ldi	r24, 0x09	; 9
  90:	9d e3       	ldi	r25, 0x3D	; 61
  92:	91 83       	std	Z+1, r25	; 0x01
  94:	80 83       	st	Z, r24
  96:	06 c0       	rjmp	.+12     	; 0xa4 <__vector_7+0x46>
		}
		else
		{
			OCR1B = 31250;
  98:	e8 e4       	ldi	r30, 0x48	; 72
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	82 e1       	ldi	r24, 0x12	; 18
  9e:	9a e7       	ldi	r25, 0x7A	; 122
  a0:	91 83       	std	Z+1, r25	; 0x01
  a2:	80 83       	st	Z, r24
		}

}
  a4:	cf 91       	pop	r28
  a6:	df 91       	pop	r29
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	2f 91       	pop	r18
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <main>:


// ***********************************************************
// Main program
//
int main(void) {
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
   DDRB |= (1<<PB1)|(1<<PB2);
  c4:	a7 e3       	ldi	r26, 0x37	; 55
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e7 e3       	ldi	r30, 0x37	; 55
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	8c 93       	st	X, r24
	TCNT1 = 0;
  d2:	ec e4       	ldi	r30, 0x4C	; 76
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	11 82       	std	Z+1, r1	; 0x01
  d8:	10 82       	st	Z, r1
   OCR1A =  31250;    //1s
  da:	ea e4       	ldi	r30, 0x4A	; 74
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	82 e1       	ldi	r24, 0x12	; 18
  e0:	9a e7       	ldi	r25, 0x7A	; 122
  e2:	91 83       	std	Z+1, r25	; 0x01
  e4:	80 83       	st	Z, r24
  OCR1B = 15625; //2s
  e6:	e8 e4       	ldi	r30, 0x48	; 72
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	89 e0       	ldi	r24, 0x09	; 9
  ec:	9d e3       	ldi	r25, 0x3D	; 61
  ee:	91 83       	std	Z+1, r25	; 0x01
  f0:	80 83       	st	Z, r24
   TIMSK |= (1<<OCIE1B);
  f2:	a9 e5       	ldi	r26, 0x59	; 89
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e9 e5       	ldi	r30, 0x59	; 89
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	8c 93       	st	X, r24
   TCCR1A = (1<< COM1A0)|(1<<COM1B0);
 100:	ef e4       	ldi	r30, 0x4F	; 79
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 e5       	ldi	r24, 0x50	; 80
 106:	80 83       	st	Z, r24
	TCCR1B = (1<<CS11)|(1<<CS10)|(1<<WGM12);
 108:	ee e4       	ldi	r30, 0x4E	; 78
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	80 83       	st	Z, r24
	MCUCR |= (1<<SE);
 110:	a5 e5       	ldi	r26, 0x55	; 85
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e5 e5       	ldi	r30, 0x55	; 85
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8c 93       	st	X, r24
	sei();
 11e:	78 94       	sei
   while(1) {             // Infinite loop; define here the
           asm("SLEEP"); // system behaviour
 120:	88 95       	sleep
 122:	fe cf       	rjmp	.-4      	; 0x120 <main+0x64>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
