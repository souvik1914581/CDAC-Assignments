
day6q1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00000160  000001d4  2**0
                  ALLOC
  2 .stab         00000420  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000691  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	23 c0       	rjmp	.+70     	; 0x5e <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e6       	ldi	r30, 0x60	; 96
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 36       	cpi	r26, 0x64	; 100
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	5e d0       	rcall	.+188    	; 0x116 <main>
  5a:	80 c0       	rjmp	.+256    	; 0x15c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_11>:
void TX(int);
int flag= 0;
int x;

ISR(  USART_RXC_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	ef 93       	push	r30
  6e:	ff 93       	push	r31
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	x = (unsigned char) UDR;
  78:	ec e2       	ldi	r30, 0x2C	; 44
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	88 2f       	mov	r24, r24
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	90 93 63 00 	sts	0x0063, r25
  86:	80 93 62 00 	sts	0x0062, r24
	flag = 1;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	90 93 61 00 	sts	0x0061, r25
  92:	80 93 60 00 	sts	0x0060, r24
}
  96:	cf 91       	pop	r28
  98:	df 91       	pop	r29
  9a:	ff 91       	pop	r31
  9c:	ef 91       	pop	r30
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <init>:
// It is recommended to use this coding style to
// follow better the mixed C-assembly code in the
// Program Memory window
//
void init(void)
{
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62

	UBRRH = UBRRH_VALUE;
  b4:	e0 e4       	ldi	r30, 0x40	; 64
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
   UBRRL = UBRRL_VALUE;
  ba:	e9 e2       	ldi	r30, 0x29	; 41
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	80 83       	st	Z, r24
  	UCSRB |= BV(RXEN) | BV(TXEN) | BV(RXCIE);
  c2:	aa e2       	ldi	r26, 0x2A	; 42
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	ea e2       	ldi	r30, 0x2A	; 42
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	88 69       	ori	r24, 0x98	; 152
  ce:	8c 93       	st	X, r24
	UCSRC |=  BV(URSEL) | BV(UCSZ0) | BV(UCSZ1);
  d0:	a0 e4       	ldi	r26, 0x40	; 64
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e0 e4       	ldi	r30, 0x40	; 64
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	86 68       	ori	r24, 0x86	; 134
  dc:	8c 93       	st	X, r24
	
	
}
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <TX>:
void TX(int x)
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	00 d0       	rcall	.+0      	; 0xea <TX+0x6>
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	9a 83       	std	Y+2, r25	; 0x02
  f0:	89 83       	std	Y+1, r24	; 0x01
   while ( !( UCSRA & (1<<UDRE)) );
  f2:	eb e2       	ldi	r30, 0x2B	; 43
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	80 72       	andi	r24, 0x20	; 32
  fe:	90 70       	andi	r25, 0x00	; 0
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	b9 f3       	breq	.-18     	; 0xf2 <TX+0xe>
	UDR = x;
 104:	ec e2       	ldi	r30, 0x2C	; 44
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	80 83       	st	Z, r24
		
}
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	08 95       	ret

00000116 <main>:

// ***********************************************************
// Main program
//
int main(void)
 {
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
		 init();
 11e:	c6 df       	rcall	.-116    	; 0xac <init>
		sei();
 120:	78 94       	sei
		TX('?');
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	de df       	rcall	.-68     	; 0xe4 <TX>
   while(1)
    {
   			if(flag ==1)
 128:	80 91 60 00 	lds	r24, 0x0060
 12c:	90 91 61 00 	lds	r25, 0x0061
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	91 05       	cpc	r25, r1
 134:	c9 f7       	brne	.-14     	; 0x128 <main+0x12>
   			{
   				flag = 0;
 136:	10 92 61 00 	sts	0x0061, r1
 13a:	10 92 60 00 	sts	0x0060, r1
   				TX(++x);
 13e:	80 91 62 00 	lds	r24, 0x0062
 142:	90 91 63 00 	lds	r25, 0x0063
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 63 00 	sts	0x0063, r25
 14c:	80 93 62 00 	sts	0x0062, r24
 150:	80 91 62 00 	lds	r24, 0x0062
 154:	90 91 63 00 	lds	r25, 0x0063
 158:	c5 df       	rcall	.-118    	; 0xe4 <TX>
 15a:	e6 cf       	rjmp	.-52     	; 0x128 <main+0x12>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
