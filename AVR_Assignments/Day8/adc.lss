
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  000001b4  00000228  2**0
                  ALLOC
  2 .stab         000004b0  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006ae  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	20 c0       	rjmp	.+64     	; 0x5e <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 eb       	ldi	r30, 0xB4	; 180
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 36       	cpi	r26, 0x66	; 102
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	7d d0       	rcall	.+250    	; 0x154 <main>
  5a:	aa c0       	rjmp	.+340    	; 0x1b0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_14>:
int x,y,flag = 0;
void TX(int);
// Interrupt handler example for INT0
//
ISR(   ADC_vect )
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
  6c:	ef 93       	push	r30
  6e:	ff 93       	push	r31
  70:	df 93       	push	r29
  72:	cf 93       	push	r28
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	x = ADCL;
  78:	e4 e2       	ldi	r30, 0x24	; 36
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	88 2f       	mov	r24, r24
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	90 93 63 00 	sts	0x0063, r25
  86:	80 93 62 00 	sts	0x0062, r24
	y = ADCH;
  8a:	e5 e2       	ldi	r30, 0x25	; 37
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	88 2f       	mov	r24, r24
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	90 93 65 00 	sts	0x0065, r25
  98:	80 93 64 00 	sts	0x0064, r24
	flag = 1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 61 00 	sts	0x0061, r25
  a4:	80 93 60 00 	sts	0x0060, r24
}	
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	ff 91       	pop	r31
  ae:	ef 91       	pop	r30
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <ADC_init>:
// Program Memory window
//


void ADC_init(void)
{
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= BV(REFS0) | BV(REFS1);
  c6:	a7 e2       	ldi	r26, 0x27	; 39
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	e7 e2       	ldi	r30, 0x27	; 39
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 6c       	ori	r24, 0xC0	; 192
  d2:	8c 93       	st	X, r24
	ADCSRA |= BV(ADEN) |  BV(ADIE) | BV(ADPS1) | BV(ADPS0);
  d4:	a6 e2       	ldi	r26, 0x26	; 38
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	e6 e2       	ldi	r30, 0x26	; 38
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8b 68       	ori	r24, 0x8B	; 139
  e0:	8c 93       	st	X, r24
	ADCSRA |= BV(ADSC); //start conversion
  e2:	a6 e2       	ldi	r26, 0x26	; 38
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	e6 e2       	ldi	r30, 0x26	; 38
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	8c 93       	st	X, r24
}
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	08 95       	ret

000000f6 <USART_init>:
void USART_init(void)
{
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62

   UBRRH = UBRRH_VALUE;
  fe:	e0 e4       	ldi	r30, 0x40	; 64
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
   UBRRL = UBRRL_VALUE;
 104:	e9 e2       	ldi	r30, 0x29	; 41
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	8c e0       	ldi	r24, 0x0C	; 12
 10a:	80 83       	st	Z, r24
	UCSRB = BV(TXEN) ;
 10c:	ea e2       	ldi	r30, 0x2A	; 42
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	80 83       	st	Z, r24
	UCSRC =  BV(URSEL) | BV(UCSZ0) | BV(UCSZ1);
 114:	e0 e4       	ldi	r30, 0x40	; 64
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	86 e8       	ldi	r24, 0x86	; 134
 11a:	80 83       	st	Z, r24
	
}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <TX>:
void TX(int x)
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	00 d0       	rcall	.+0      	; 0x128 <TX+0x6>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	9a 83       	std	Y+2, r25	; 0x02
 12e:	89 83       	std	Y+1, r24	; 0x01
   while ( !( UCSRA & (1<<UDRE)) );
 130:	eb e2       	ldi	r30, 0x2B	; 43
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 2f       	mov	r24, r24
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	80 72       	andi	r24, 0x20	; 32
 13c:	90 70       	andi	r25, 0x00	; 0
 13e:	00 97       	sbiw	r24, 0x00	; 0
 140:	b9 f3       	breq	.-18     	; 0x130 <TX+0xe>
	UDR = x;		
 142:	ec e2       	ldi	r30, 0x2C	; 44
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	80 83       	st	Z, r24
}
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <main>:


// ***********************************************************
// Main program
//
int main(void) {
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
DDRB  |= BC(PB0); //PB0 as input
 15c:	a7 e3       	ldi	r26, 0x37	; 55
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	e7 e3       	ldi	r30, 0x37	; 55
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8e 6f       	ori	r24, 0xFE	; 254
 168:	8c 93       	st	X, r24
PORTB |= BV(PB0); //pullup
 16a:	a8 e3       	ldi	r26, 0x38	; 56
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e8 e3       	ldi	r30, 0x38	; 56
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	81 60       	ori	r24, 0x01	; 1
 176:	8c 93       	st	X, r24
USART_init();
 178:	be df       	rcall	.-132    	; 0xf6 <USART_init>
sei();
 17a:	78 94       	sei
ADC_init();
 17c:	a0 df       	rcall	.-192    	; 0xbe <ADC_init>
while(1)
{
	if(flag == 1)
 17e:	80 91 60 00 	lds	r24, 0x0060
 182:	90 91 61 00 	lds	r25, 0x0061
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	91 05       	cpc	r25, r1
 18a:	c9 f7       	brne	.-14     	; 0x17e <main+0x2a>
	{
		flag = 0;
 18c:	10 92 61 00 	sts	0x0061, r1
 190:	10 92 60 00 	sts	0x0060, r1
		TX(x);
 194:	80 91 62 00 	lds	r24, 0x0062
 198:	90 91 63 00 	lds	r25, 0x0063
 19c:	c2 df       	rcall	.-124    	; 0x122 <TX>
		
		asm("nop");
 19e:	00 00       	nop
		ADCSRA |= BV(ADSC); //start conversion
 1a0:	a6 e2       	ldi	r26, 0x26	; 38
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	e6 e2       	ldi	r30, 0x26	; 38
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	8c 93       	st	X, r24
 1ae:	e7 cf       	rjmp	.-50     	; 0x17e <main+0x2a>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
