   1               		.file	"adc.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  70               	.global	flag
  71               	.global	flag
  72               		.section .bss
  75               	flag:
  76 0000 0000      		.skip 2,0
  77               		.text
  79               	.global	__vector_14
  81               	__vector_14:
   1:adc.c         **** // ***********************************************************
   2:adc.c         **** // Project:
   3:adc.c         **** // Author:
   4:adc.c         **** // Module description:
   5:adc.c         **** // ***********************************************************
   6:adc.c         **** 
   7:adc.c         **** #include <avr\io.h>              // Most basic include files
   8:adc.c         **** #include <avr\interrupt.h>       // Add the necessary ones
   9:adc.c         **** #include <avr\signal.h>          // here
  10:adc.c         **** #define BAUD 9600
  11:adc.c         **** #define F_CPU 1000000
  12:adc.c         **** #include <util/setbaud.h>
  13:adc.c         **** #define BV(X) (1<<X)
  14:adc.c         **** #define BC(X)  ~(1<<X)
  15:adc.c         **** #define VREF 2.56
  16:adc.c         **** // Define here the global static variables
  17:adc.c         **** //
  18:adc.c         **** int x,y,flag = 0;
  19:adc.c         **** void TX(int);
  20:adc.c         **** // Interrupt handler example for INT0
  21:adc.c         **** //
  22:adc.c         **** ISR(   ADC_vect )
  23:adc.c         **** {
  82               	EG__
  83               		push r0
  84               		clr __zero_reg__
  85 0000 1F92      		push r24
  86 0002 0F92      		push r25
  87 0004 0FB6      		push r30
  88 0006 0F92      		push r31
  89 0008 1124      		push r29
  90 000a 8F93      		push r28
  91 000c 9F93      		in r28,__SP_L__
  92 000e EF93      		in r29,__SP_H__
  93 0010 FF93      	/* prologue: Signal */
  94 0012 DF93      	/* frame size = 0 */
  96 0016 CDB7      	.LM1:
  97 0018 DEB7      		ldi r30,lo8(36)
  98               		ldi r31,hi8(36)
  99               		ld r24,Z
  24:adc.c         **** 	x = ADCL;
 100               	r25,lo8(0)
 101               		sts (x)+1,r25
 102 001a E4E2      		sts x,r24
 104 001e 8081      	.LM2:
 105 0020 882F      		ldi r30,lo8(37)
 106 0022 90E0      		ldi r31,hi8(37)
 107 0024 9093 0000 		ld r24,Z
 108 0028 8093 0000 		mov r24,r24
  25:adc.c         **** 	y = ADCH;
 109               	 */
 110               	/* frame size = 0 */
 112 002e F0E0      	.LM1:
 113 0030 8081      		ldi r30,lo8(36)
 114 0032 882F      		ldi r31,hi8(36)
 115 0034 90E0      		ld r24,Z
 116 0036 9093 0000 		mov r24,r24
 117 003a 8093 0000 		ldi r25,lo8(0)
  26:adc.c         **** 	flag = 1;
 118               	1,r25
 119               		sts x,r24
 121 0040 90E0      	.LM2:
 122 0042 9093 0000 		ldi r30,lo8(37)
 123 0046 8093 0000 		ldi r31,hi8(37)
 124               		ld r24,Z
  27:adc.c         **** }	
 125               	ologue: Signal */
 126               	/* frame size = 0 */
 128 004c DF91      	.LM1:
 129 004e FF91      		ldi r30,lo8(36)
 130 0050 EF91      		ldi r31,hi8(36)
 131 0052 9F91      		ld r24,Z
 132 0054 8F91      		mov r24,r24
 133 0056 0F90      		ldi r25,lo8(0)
 134 0058 0FBE      		sts (x)+1,r25
 135 005a 0F90      		sts x,r24
 137 005e 1895      	.LM2:
 138               		ldi r30,lo8(37)
 139               		ldi r31,hi8(37)
 140               		ld r24,Z
 141               		mov r24,r24
 142               		ldi r25,lo8(0)
 143               		sts (y)+1,r25
  28:adc.c         **** 
  29:adc.c         **** // It is recommended to use this coding style to
  30:adc.c         **** // follow better the mixed C-assembly code in the
  31:adc.c         **** // Program Memory window
  32:adc.c         **** //
  33:adc.c         **** 
  34:adc.c         **** 
  35:adc.c         **** void ADC_init(void)
  36:adc.c         **** {
 144               	68,0,26,.LM3-.LFBB1
 145               	.LM3:
 146               		ldi r24,lo8(1)
 147 0060 DF93      		ldi r25,hi8(1)
 148 0062 CF93      		sts (flag)+1,r25
 149 0064 CDB7      		sts flag,r24
 150 0066 DEB7      	/* epilogue start */
 152               	.LM4:
  37:adc.c         **** 	ADMUX |= BV(REFS0) | BV(REFS1);
 153               	)
 154               		ldi r31,hi8(37)
 155 0068 A7E2      		ld r24,Z
 156 006a B0E0      		mov r24,r24
 157 006c E7E2      		ldi r25,lo8(0)
 158 006e F0E0      		sts (y)+1,r25
 159 0070 8081      		sts y,r24
 161 0074 8C93      	.LM3:
  38:adc.c         **** 	ADCSRA |= BV(ADEN) |  BV(ADIE) | BV(ADPS1) | BV(ADPS0);
 162               	r31,hi8(36)
 163               		ld r24,Z
 164 0076 A6E2      		mov r24,r24
 165 0078 B0E0      		ldi r25,lo8(0)
 166 007a E6E2      		sts (x)+1,r25
 167 007c F0E0      		sts x,r24
 169 0080 8B68      	.LM2:
 170 0082 8C93      		ldi r30,lo8(37)
  39:adc.c         **** 	ADCSRA |= BV(ADSC); //start conversion
 171               	hi8(37)
 172               		ld r24,Z
 173 0084 A6E2      		mov r24,r24
 174 0086 B0E0      		ldi r25,lo8(0)
 175 0088 E6E2      		sts (y)+1,r25
 176 008a F0E0      		sts y,r24
 178 008e 8064      	.LM3:
 179 0090 8C93      		ldi r24,lo8(1)
 180               		ldi r25,hi8(1)
  40:adc.c         **** }
 181               	
 182               		ldi r25,lo8(0)
 183 0092 CF91      		sts (x)+1,r25
 184 0094 DF91      		sts x,r24
 186               	.LM2:
 187               		ldi r30,lo8(37)
 188               		ldi r31,hi8(37)
 189               		ld r24,Z
 190               		mov r24,r24
 191               		ldi r25,lo8(0)
  41:adc.c         **** void USART_init(void)
  42:adc.c         **** {
 192               	 = 0 */
 194               	.LM1:
 195 0098 DF93      		ldi r30,lo8(36)
 196 009a CF93      		ldi r31,hi8(36)
 197 009c CDB7      		ld r24,Z
 198 009e DEB7      		mov r24,r24
 199               		ldi r25,lo8(0)
 200               		sts (x)+1,r25
  43:adc.c         **** 
  44:adc.c         ****    UBRRH = UBRRH_VALUE;
 201               	4
 203 00a0 E0E4      	.LM2:
 204 00a2 F0E0      		ldi r30,lo8(37)
 205 00a4 1082      		ldi r31,hi8(37)
  45:adc.c         ****    UBRRL = UBRRL_VALUE;
 206               	P_H__
 207               	/* prologue: Signal */
 208 00a6 E9E2      	/* frame size = 0 */
 210 00aa 8CE0      	.LM1:
 211 00ac 8083      		ldi r30,lo8(36)
  46:adc.c         **** 	UCSRB = BV(TXEN) ;
 212               	31,hi8(36)
 213               		ld r24,Z
 214 00ae EAE2      		mov r24,r24
 215 00b0 F0E0      		ldi r25,lo8(0)
 216 00b2 88E0      		sts (x)+1,r25
 217 00b4 8083      		sts x,r24
  47:adc.c         **** 	UCSRC =  BV(URSEL) | BV(UCSZ0) | BV(UCSZ1);
 218               	n	68,0,25,.LM2-.LFBB1
 219               	.LM2:
 220 00b6 E0E4      		ldi r30,lo8(37)
 221 00b8 F0E0      		ldi r31,hi8(37)
 222 00ba 86E8      		ld r24,Z
 223 00bc 8083      		mov r24,r24
 224               		ldi r25,lo8(0)
  48:adc.c         **** 	
  49:adc.c         **** }
 225               	 = 0 */
 227 00be CF91      	.LM1:
 228 00c0 DF91      		ldi r30,lo8(36)
 229 00c2 0895      		ldi r31,hi8(36)
 230               		ld r24,Z
 231               		mov r24,r24
 232               		ldi r25,lo8(0)
 233               		sts (x)+1,r25
 234               		sts x,r24
 236               	.LM2:
  50:adc.c         **** void TX(int x)
  51:adc.c         **** {
 237               	(37)
 238               		ldi r31,hi8(37)
 239               		ld r24,Z
 240 00c4 DF93      		mov r24,r24
 241 00c6 CF93      		ldi r25,lo8(0)
 242 00c8 00D0      		sts (y)+1,r25
 243 00ca CDB7      		sts y,r24
 245               	.LM3:
 246               		ldi r24,lo8(1)
 247 00ce 9A83      		ldi r25,hi8(1)
 248 00d0 8983      		sts (flag)+1,r25
 249               		sts flag,r24
  52:adc.c         ****    while ( !( UCSRA & (1<<UDRE)) );
 250               	ts x,r24
 252 00d2 EBE2      	.LM2:
 253 00d4 F0E0      		ldi r30,lo8(37)
 254 00d6 8081      		ldi r31,hi8(37)
 255 00d8 882F      		ld r24,Z
 256 00da 90E0      		mov r24,r24
 257 00dc 8072      		ldi r25,lo8(0)
 258 00de 9070      		sts (y)+1,r25
 259 00e0 0097      		sts y,r24
  53:adc.c         **** 	UDR = x;		
 261               	)
 262               		ldi r31,hi8(36)
 263 00e4 ECE2      		ld r24,Z
 264 00e6 F0E0      		mov r24,r24
 265 00e8 8981      		ldi r25,lo8(0)
 266 00ea 8083      		sts (x)+1,r25
 267               		sts x,r24
  54:adc.c         **** }
 268               		68,0,25,.LM2-.LFBB1
 269               	.LM2:
 270 00ec 0F90      		ldi r30,lo8(37)
 271 00ee 0F90      		ldi r31,hi8(37)
 272 00f0 CF91      		ld r24,Z
 273 00f2 DF91      		mov r24,r24
 274 00f4 0895      		ldi r25,lo8(0)
 275               		sts (y)+1,r25
 276               		sts y,r24
 278               	.LM3:
 279               		ldi r24,lo8(1)
 280               		ldi r25,hi8(1)
  55:adc.c         **** 
  56:adc.c         **** 
  57:adc.c         **** // ***********************************************************
  58:adc.c         **** // Main program
  59:adc.c         **** //
  60:adc.c         **** int main(void) {
 281               	
 282               		ldi r25,lo8(0)
 283               		sts (x)+1,r25
 284 00f6 DF93      		sts x,r24
 286 00fa CDB7      	.LM2:
 287 00fc DEB7      		ldi r30,lo8(37)
 288               		ldi r31,hi8(37)
 289               		ld r24,Z
  61:adc.c         **** DDRB  |= BC(PB0); //PB0 as input
 290               	ologue: Signal */
 291               	/* frame size = 0 */
 293 0100 B0E0      	.LM1:
 294 0102 E7E3      		ldi r30,lo8(36)
 295 0104 F0E0      		ldi r31,hi8(36)
 296 0106 8081      		ld r24,Z
 297 0108 8E6F      		mov r24,r24
 298 010a 8C93      		ldi r25,lo8(0)
  62:adc.c         **** PORTB |= BV(PB0); //pullup
 299               	1,r25
 300               		sts x,r24
 302 010e B0E0      	.LM2:
 303 0110 E8E3      		ldi r30,lo8(37)
 304 0112 F0E0      		ldi r31,hi8(37)
 305 0114 8081      		ld r24,Z
 306 0116 8160      		mov r24,r24
 307 0118 8C93      		ldi r25,lo8(0)
  63:adc.c         **** USART_init();
 308               	 = 0 */
 310 011a 00D0      	.LM1:
  64:adc.c         **** sei();
 311               	i r30,lo8(36)
 312               		ldi r31,hi8(36)
 313               		ld r24,Z
 314               		mov r24,r24
 315 011c 7894      		ldi r25,lo8(0)
 316               		sts (x)+1,r25
  65:adc.c         **** ADC_init();
 317               	,r24
 319               	.LM2:
 320 011e 00D0      		ldi r30,lo8(37)
 321               		ldi r31,hi8(37)
  66:adc.c         **** while(1)
  67:adc.c         **** {
  68:adc.c         **** 	if(flag == 1)
 322               	P_H__
 323               	/* prologue: Signal */
 324 0120 8091 0000 	/* frame size = 0 */
 326 0128 8130      	.LM1:
 327 012a 9105      		ldi r30,lo8(36)
 328 012c 01F4      		ldi r31,hi8(36)
  69:adc.c         **** 	{
  70:adc.c         **** 		flag = 0;
 329               	,Z
 330               		mov r24,r24
 331 012e 1092 0000 		ldi r25,lo8(0)
 332 0132 1092 0000 		sts (x)+1,r25
  71:adc.c         **** 		TX(x);
 333               	 x,r24
 335 0136 8091 0000 	.LM2:
 336 013a 9091 0000 		ldi r30,lo8(37)
 337 013e 00D0      		ldi r31,hi8(37)
  72:adc.c         **** 		
  73:adc.c         **** 		asm("nop");
 338               	P_H__
 339               	/* prologue: Signal */
 340               	/* frame size = 0 */
 342 0140 0000      	.LM1:
 343               		ldi r30,lo8(36)
  74:adc.c         **** 		ADCSRA |= BV(ADSC); //start conversion
 344               	31,hi8(36)
 345               		ld r24,Z
 346               		mov r24,r24
 347 0142 A6E2      		ldi r25,lo8(0)
 348 0144 B0E0      		sts (x)+1,r25
 349 0146 E6E2      		sts x,r24
 351 014a 8081      	.LM2:
 352 014c 8064      		ldi r30,lo8(37)
 353 014e 8C93      		ldi r31,hi8(37)
 354 0150 00C0      		ld r24,Z
 355               		mov r24,r24
 356               		ldi r25,lo8(0)
 357               		sts (y)+1,r25
 358               		sts y,r24
 360               	.LM3:
 361               		ldi r24,lo8(1)
 362               		ldi r25,hi8(1)
 363               		sts (flag)+1,r25
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\users\batch2\Temp/ccEwbzh0.s:2      *ABS*:0000003f __SREG__
C:\users\batch2\Temp/ccEwbzh0.s:3      *ABS*:0000003e __SP_H__
C:\users\batch2\Temp/ccEwbzh0.s:4      *ABS*:0000003d __SP_L__
C:\users\batch2\Temp/ccEwbzh0.s:5      *ABS*:00000034 __CCP__
C:\users\batch2\Temp/ccEwbzh0.s:6      *ABS*:00000000 __tmp_reg__
C:\users\batch2\Temp/ccEwbzh0.s:7      *ABS*:00000001 __zero_reg__
C:\users\batch2\Temp/ccEwbzh0.s:75     .bss:00000000 flag
C:\users\batch2\Temp/ccEwbzh0.s:81     .text:00000000 __vector_14
                            *COM*:00000002 x
                            *COM*:00000002 y
C:\users\batch2\Temp/ccEwbzh0.s:143    .text:00000060 ADC_init
C:\users\batch2\Temp/ccEwbzh0.s:191    .text:00000098 USART_init
C:\users\batch2\Temp/ccEwbzh0.s:236    .text:000000c4 TX
C:\users\batch2\Temp/ccEwbzh0.s:280    .text:000000f6 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
